# -*- coding: utf-8 -*-
"""Dashboard_gradio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y9LB80lYukwf-vtCLkb2oy5UpKuVwzno
"""

!pip install gradio

import torch
from google.colab import drive
import torchvision.models as models


# Mount Google Drive
drive.mount('/content/drive')

# Load the trained ResNet model architecture. Replace resnet18 with your model architecture if different
model = models.resnet18(num_classes=2) # Change num_classes to match the number of classes in your trained model
# Load the state dictionary into the model
state_dict = torch.load('/content/drive/My Drive/XAI_AA/resnet18_model.pth')
model.load_state_dict(state_dict)

model.eval()

!pip install captum

import torchvision.transforms as transforms
from PIL import Image
from captum.attr import LayerGradCam
import matplotlib.pyplot as plt
import gradio as gr

# Define the target layer
target_layer = model.layer4[1].conv2

# Grad-CAM function
def apply_gradcam(image):
    # Preprocess the uploaded image
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
    ])
    input_image = transform(image).unsqueeze(0)

    # Apply Grad-CAM
    gradcam = LayerGradCam(model, target_layer)
    attributions = gradcam.attribute(input_image, target=0, relu_attributions=True)

    # Visualize the Grad-CAM heatmap
    plt.figure(figsize=(10, 10))
    plt.imshow(attributions[0].cpu().permute(1, 2, 0).detach().numpy(), cmap='jet')
    plt.axis('off')
    plt.savefig('gradcam_output.png')

    return 'gradcam_output.png'

# Test the function
# apply_gradcam('/path/to/test/image.jpg')

import torch
from google.colab import drive
import torchvision.transforms as transforms
from PIL import Image
from captum.attr import LayerGradCam
from captum.attr import visualization as viz
import matplotlib.pyplot as plt
import numpy as np
import gradio as gr
import torchvision.models as models

# Mount Google Drive
drive.mount('/content/drive')

# Load the trained ResNet model architecture. Replace resnet18 with your model architecture if different
model = models.resnet18(num_classes=2)  # Change num_classes to match the number of classes in your trained model

# Load the state dictionary into the model
state_dict = torch.load('/content/drive/My Drive/XAI_AA/resnet18_model.pth')
model.load_state_dict(state_dict)

model.eval()

# Define the target layer for Grad-CAM
target_layer = model.layer4[1].conv2

# Define a function to apply Grad-CAM on a single image and return prediction with a heatmap
def apply_gradcam(image):
    # Load and preprocess the image
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
    ])
    input_image = transform(image).unsqueeze(0)

    # Make a prediction
    with torch.no_grad():
        output = model(input_image)
        _, predicted_class = torch.max(output, 1)
        class_label = 'NORMAL' if predicted_class.item() == 0 else 'PNEUMONIA'

    # Apply Grad-CAM
    gradcam = LayerGradCam(model, target_layer)
    attributions = gradcam.attribute(input_image, target=predicted_class.item(), relu_attributions=True)

    # Visualize the Grad-CAM heatmap
    fig, ax = plt.subplots(1, 1, figsize=(10, 10))
    heatmap = attributions[0].cpu().permute(1, 2, 0).detach().numpy()
    img = input_image[0].cpu().permute(1, 2, 0).detach().numpy()
    ax.imshow(img)
    ax.imshow(heatmap, cmap='jet', alpha=0.5)
    ax.axis('off')
    ax.set_title(f'Prediction: {class_label}', fontsize=16)

    # Add a colorbar to show feature importance
    cbar = plt.colorbar(ax.imshow(heatmap, cmap='jet', alpha=0.5), ax=ax, orientation='vertical')
    cbar.set_label('Feature Importance', fontsize=12)

    # Save the heatmap as an image
    plt.savefig('gradcam_output.png')
    plt.close()

    return 'gradcam_output.png', class_label

# Gradio interface
interface = gr.Interface(
    fn=apply_gradcam,
    inputs=gr.Image(type="pil"),
    outputs=["image", "text"],
    title="Pneumonia Prediction Grad-CAM",
    description="Upload an image to see the Grad-CAM heatmap and prediction."
)

# Launch the Gradio interface
interface.launch()

# Gradio interface
interface = gr.Interface(
    fn=apply_gradcam,
    inputs=gr.Image(type="pil"),
    outputs="image",
    title="Diabetes Prediction Grad-CAM",
    description="Upload an image to see the Grad-CAM heatmap for the prediction."
)

# Launch the dashboard
interface.launch()